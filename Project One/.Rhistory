filter(DATE < as.Date("2010-05-01")) %>%
# ensure dates are ascending
arrange(DATE)
atm$ATM2[is.na(atm$ATM2)] <- mean(atm$ATM2, na.rm = TRUE) ## remove NA
atm$ATM4[which.max(atm$ATM4)] <- mean(atm$ATM4, na.rm = TRUE) ## remove outlier
# create TS with weekly frequency & subset data
atm_ts <- atm %>% select(-DATE) %>% ts(start=1,  frequency = 7)
ATM1_ts <- atm_ts[,1]; ATM2_ts <- atm_ts[,2]; ATM3_ts <- atm_ts[,3]; ATM4_ts <- atm_ts[,4]
#unit root test
## no diff
ATM1_ur <-ur.kpss(ATM1_ts)
ATM2_ur <-ur.kpss(ATM2_ts)
ATM4_ur <-ur.kpss(ATM4_ts)
## first order diff
ATM1d_ur <-ur.kpss(diff(ATM1_ts, lag=7))
ATM2d_ur <-ur.kpss(diff(ATM2_ts, lag=7))
ATM4d_ur <-ur.kpss(diff(ATM4_ts, lag=7))
# AUTO.ARIMA function; set D=1 for seasonal differencing
ATM1_AA <-auto.arima(ATM1_ts, D = 1, lambda = "auto", approximation = F, stepwise = T)
ATM2_AA <-auto.arima(ATM2_ts, D = 1, lambda = "auto", approximation = F, stepwise = T)
ATM4_AA <-auto.arima(ATM4_ts, D = 1, lambda = "auto", approximation = F, stepwise = T)
# Forecast Results
ATM1_fc <- forecast(ATM1_AA,h=31)
ATM2_fc <- forecast(ATM2_AA,h=31)
ATM3_fc <- meanf(ATM3_ts[ATM3_ts > 0], h=31)# based on three non-zero values (between observations 363 and 365)
ATM4_fc <- forecast(ATM4_AA,h=31)
# Prepare dataframe for ATM3 mean forcast plotting
ATM3_plotdata_fc <- cbind(seq(from = 366, to = 396),
ATM3_fc[[5]],
ATM3_fc[[6]],
ATM3_fc[[7]]) %>%
as.data.frame()
colnames(ATM3_plotdata_fc) <- c('Date', 'Point Forecast', 'Lo 80', 'Lo 95', 'Hi 80', 'Hi 95')
ATM3_plotdata <- ATM3_ts %>%
fortify() %>%
select(-Index) %>%
rename(Cash = Data) %>%
mutate(Date = as.numeric(row.names(.))) %>%
select(Date, Cash) %>%
full_join(ATM3_plotdata_fc, by = 'Date')
# Revert results back into original form
# date <- as.character(seq(as.Date('2010-05-01'), length.out=31, by=1))
# ATM_FC <-  cbind("Date"=date, "ATM1"=ATM1_fc$mean, "ATM2"=ATM2_fc$mean,
# "ATM3"=c(NA,NA,NA,NA),"ATM4"=ATM4_fc$mean) %>% as.data.frame()
# Combine the forecasts for the different ATMS
ATM_ALL_FC <- bind_cols(as.data.frame(ATM1_AA[4:6]),
as.data.frame(ATM2_AA[4:6]),
as.data.frame(ATM3_fc[5:7]),
as.data.frame(ATM4_AA[4:6])) %>%
rename(ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM3_low80CI = 'lower.80.2',
ATM3_low95CI = 'lower.95.2',
ATM3_upper80CI = 'upper.80.2',
ATM3_upper95CI = 'upper.95.2'
ATM4_mean = 'mean3',
# Combine the forecasts for the different ATMS
ATM_ALL_FC <- bind_cols(as.data.frame(ATM1_AA[4:6]),
as.data.frame(ATM2_AA[4:6]),
as.data.frame(ATM3_fc[5:7]),
as.data.frame(ATM4_AA[4:6])) %>%
rename(ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM3_low80CI = 'lower.80.2',
ATM3_low95CI = 'lower.95.2',
ATM3_upper80CI = 'upper.80.2',
ATM3_upper95CI = 'upper.95.2',
ATM4_mean = 'mean3',
ATM4_low80CI = 'lower.80.3',
ATM4_low95CI = 'lower.95.3',
ATM4_upper80CI = 'upper.80.3',
ATM4_upper95CI = 'upper.95.3'
)
as.data.frame(ATM2_AA[4:6]) %>% head()
as.data.frame(ATM3_fc[5:7]) %>% head()
as.data.frame(ATM2_AA[4:6]) %>% head()
as.data.frame(ATM2_AA[4:6])
ATM2_AA[1:6]
str(ATM2_AA)
str(ATM1_fc)
ATM1_fc[4:6]
ATM3_fc[4:6]
ATM_ALL_FC <- bind_cols(as.data.frame(ATM1_fc[4:6]),
as.data.frame(ATM2_fc[4:6]),
as.data.frame(ATM3_fc[5:7]),
as.data.frame(ATM4_fc[4:6])) %>%
rename(ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM3_low80CI = 'lower.80.2',
ATM3_low95CI = 'lower.95.2',
ATM3_upper80CI = 'upper.80.2',
ATM3_upper95CI = 'upper.95.2',
ATM4_mean = 'mean3',
ATM4_low80CI = 'lower.80.3',
ATM4_low95CI = 'lower.95.3',
ATM4_upper80CI = 'upper.80.3',
ATM4_upper95CI = 'upper.95.3'
)
ATM_ALL_FC %>% head()
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
library(easypackages)
libraries('knitr', 'kableExtra', 'default')
# Processing
libraries('readxl', 'tidyverse', 'janitor', 'imputeTS', 'tsoutliers')
# Timeseries
libraries('urca', 'forecast', 'timetk')
# Graphing
libraries('ggplot2', 'grid', 'gridExtra', 'ggfortify','ggpubr', 'scales')
### UNIVERSAL DATA SOURCING & DEFAULT SETTINGS FOR PROJECT
library(knitr)
library(kableExtra)
library(default)
# Load All Sourced Code Here >>>
suppressWarnings(source("scripts/Part-B.R"))
# Set default augments for code chunks
knitr::opts_chunk$set(echo = F, message=F, warning=F, error=F, comment=F, fig.width=10, fig.height = 3)
# Set default augments for `kable_styling()`
default(kable) <- list(format="latex")
default(kable_styling)  <- list(latex_options = c("HOLD_position", "striped"))
default(row_spec) <- list(row=0, bold=T)
# Set default for ggplot theme
default(theme) <- list(axis.text.x = element_text(angle = 0, hjust = NULL),
plot.title = element_text(color="#4c4c4c", size=12, face="bold"),
plot.subtitle = (element_text(size=8, color="#000000")),
legend.title = (element_text(size=10, color="#000000", face="bold")),
strip.background = element_rect(color="#000000",
fill="#cccdd0", size=.75,linetype="solid"),
strip.text.x = element_text(size = 8, color = "#000000", face="bold"))
# GGplot Palette
default(scale_color_brewer) <- list(palette = 'RdPu', direction=1)
# time series plot
autoplot(ts_data) +
labs(title = "Monthly Residential Power Usage", subtitle = "Time Series: 01/98 - 12/13", y = "KWH (in Millions)")+
theme_bw()+theme()+scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
# season plot
p1 <- ggseasonplot(ts_data)+
labs(title="Seasonal Plot")+theme_bw()+theme(legend.position = 'none')+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
# sub-season plot
p2 <- ggsubseriesplot(ts_data)+labs(title="Subseries Plot", y="")+theme_bw()+theme()+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
# ggAcf
p3 <- ggAcf(ts_data)+labs(title="ACF Plot", y="")+theme_bw()+theme()
# STL decomposition
p4 <- autoplot(stl1)+theme_bw()+theme()+scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
grid.arrange(grob=p1, p2, p3, p4, ncol=2,
layout_matrix = rbind(c(1, 4),
c(2, 4),
c(3, 4)),
top=textGrob(label="Diagnostic Plots"))
checkresiduals(arima_fc)
checkresiduals(stl_ndemp)
checkresiduals(stl_demp)
checkresiduals(ets_model)
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_model,
ts.connect = TRUE)
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed")) +
geom_line(aes(x= Month, y = Fitted, color = "fitted")) +
geom_line(aes(x= Month, y = Point Forecast, color = "point forecast")) +
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed")) +
geom_line(aes(x= Month, y = Fitted, color = "fitted")) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "point forecast")) +
geom_ribbon(aes(x= Month, ymin = Lo 80, ymax = Hi 80,  fill = "80"),  alpha = 0.2) +
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed")) +
geom_line(aes(x= Month, y = Fitted, color = "fitted"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed")) +
geom_line(aes(x= Month, y = Fitted, color = "fitted")) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "point forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("blue", "dodgerblue")) +
scale_color_manual("Legend", values = c("red", "darkgreen", "blue"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed")) +
geom_line(aes(x= Month, y = Fitted, color = "fitted")) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "point forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("blue", "dodgerblue")) +
scale_color_manual("Legend", values = c("black", "orange", "blue"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed")) +
geom_line(aes(x= Month, y = Fitted, color = "fitted")) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "point forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("yellow", "orange")) +
scale_color_manual("Legend", values = c("black", "orange", "blue"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed")) +
geom_line(aes(x= Month, y = Fitted, color = "fitted")) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "point forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("yellow", "orange")) +
scale_color_manual("Legend", values = c("black", "pink", "red"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed"), size=2) +
geom_line(aes(x= Month, y = Fitted, color = "fitted")) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "point forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("yellow", "orange")) +
scale_color_manual("Legend", values = c("black", "pink", "red"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "observed"), size=1) +
geom_line(aes(x= Month, y = Fitted, color = "fitted")) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "point forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.2, size=1.5) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.2, size=1.5) +
scale_fill_manual("CI", values = c("yellow", "orange")) +
scale_color_manual("Legend", values = c("black", "pink", "red"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "Observed"), size=1) +
geom_line(aes(x= Month, y = Fitted, color = "Fitted"), alpha=.5) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "Point Forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("yellow", "orange")) +
scale_color_manual("Legend", values = c("black", "pink", "red"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "Observed"), size=1, alpha=.5) +
geom_line(aes(x= Month, y = Fitted, color = "Fitted")) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "Point Forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("yellow", "orange")) +
scale_color_manual("Legend", values = c("pink", "black", "red"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "Observed")) +
geom_line(aes(x= Month, y = Fitted, color = "Fitted"),size=1, alpha=.5) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "Point Forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("yellow", "orange")) +
scale_color_manual("Legend", values = c("pink", "black", "red"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "Observed")) +
geom_line(aes(x= Month, y = Fitted, color = "Fitted"),size=1, alpha=.5) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "Point Forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("yellow", "orange")) +
scale_color_manual("Legend", values = c("darkpink", "black", "darkpink"))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "Observed")) +
geom_line(aes(x= Month, y = Fitted, color = "Fitted"),size=1, alpha=.5) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "Point Forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("yellow", "orange")) +
scale_color_manual("Legend", values = c("pink", "black", "deeppink4"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "Observed")) +
geom_line(aes(x= Month, y = Fitted, color = "Fitted"),size=1, alpha=.5) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "Point Forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.2) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.2) +
scale_fill_manual("CI", values = c("grey", "peachpuff")) +
scale_color_manual("Legend", values = c("pink", "black", "deeppink4"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "Observed")) +
geom_line(aes(x= Month, y = Fitted, color = "Fitted"),size=1, alpha=.5) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "Point Forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.5) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.5) +
scale_fill_manual("CI", values = c("grey", "peachpuff")) +
scale_color_manual("Legend", values = c("pink", "black", "deeppink4"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
autoplot(arima_fc)+
scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))+
labs(title="Forecast: Residential Power - Model 1", subtitle="ARIMA(3,0,2)(2,1,0)[12] with drift", y = "KWH (in Millions)")+theme_bw()+theme()
for_plot <- ggfortify:::fortify.forecast(arima_fc,
ts.connect = TRUE)
for_plot <- rename(for_plot, Month = Index, KWH = Data)
ggplot(data = for_plot) +
geom_line(aes(x= Month, y = KWH, color = "Observed")) +
geom_line(aes(x= Month, y = Fitted, color = "Fitted"),size=1, alpha=.5) +
geom_line(aes(x= Month, y = `Point Forecast`, color = "Point Forecast")) +
geom_ribbon(aes(x= Month, ymin = `Lo 80`, ymax = `Hi 80`,  fill = "80%"),  alpha = 0.75) +
geom_ribbon(aes(x= Month, ymin = `Lo 95`, ymax = `Hi 95`,  fill = "95%"),  alpha = 0.5) +
scale_fill_manual("CI", values = c("grey", "peachpuff")) +
scale_color_manual("Legend", values = c("pink", "black", "deeppink4"))
## unable to get autoplot autolayer working :(
## Error: Invalid input: date_trans works with objects of class Date only
#forecast::autoplot(arima_fc)+forecast::autolayer(arima_auto$fitted, series="Fitted")
#  labs(y = "KWH (in Millions)")+
#  theme_classic()+theme(legend.position = 'bottom')+
#  scale_y_continuous(label = unit_format(unit = "m", scale = 1e-6))
