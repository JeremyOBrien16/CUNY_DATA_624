# Dependencies
## processing
library(readxl)
library(tidyverse)
library(janitor)
## forecasting packages
library(urca)
library(forecast)
library(fpp2)
library(zoo)
# Load data
atm_data <- read_excel("data/ATM624Data.xlsx")
# Purge observations for which ATM and cash are NA
atm_data <- atm_data %>%
na.omit()
# Transform data frame to time series
atm_ts <- atm_data %>%
spread(key = ATM, value = Cash) %>%
read.zoo(FUN = as.POSIXct) %>%
ts()
# Split the time series by ATM [COULD GENERATE MORE SUCCINCT CODE TO FUNCTIONALIZE THIS]
ATM1 <- atm_data %>%
dplyr::filter(ATM == 'ATM1') %>%
select(DATE, Cash) %>%
read.zoo(FUN = as.POSIXct) %>%
ts()
ATM2 <- atm_data %>%
dplyr::filter(ATM == 'ATM2') %>%
select(DATE, Cash) %>%
read.zoo(FUN = as.POSIXct) %>%
ts()
ATM3 <- atm_data %>%
dplyr::filter(ATM == 'ATM3') %>%
select(DATE, Cash) %>%
read.zoo(FUN = as.POSIXct) %>%
ts()
ATM4 <- atm_data %>%
dplyr::filter(ATM == 'ATM4') %>%
select(DATE, Cash) %>%
read.zoo(FUN = as.POSIXct) %>%
ts()
# Generate ATM1 ETS model with autoselection
ATM1_ets <- ATM1 %>%
ets()
# Calculate ATM1 ETS model forecast
ATM1_ets_fc <- ATM1_ets %>%
forecast(h = 31)
# Generate ATM1 ARIMA model with autoselection, single-differenced with no shortcuts to consider all possible models
ATM1_arima <- ATM1 %>%
auto.arima(D = 1,
stepwise = FALSE,
approximation = FALSE)
# Calculate ATM1 ARIMA model forecast
ATM1_arima_fc <- ATM1_arima %>%
forecast(h = 31)
# Generate ATM2 ETS model with autoselection
ATM2_ets <- ATM2 %>%
ets()
# Calculate ATM2 ETS model forecast
ATM2_ets_fc <- ATM2_ets %>%
forecast(h = 31)
# Generate ATM2 ARIMA model with autoselection, single-differenced with no shortcuts to consider all possible models
ATM2_arima <- ATM2 %>%
auto.arima(D = 1,
stepwise = FALSE,
approximation = FALSE)
# Calculate ATM2 ARIMA model forecast
ATM2_arima_fc <- ATM2_arima %>%
forecast(h = 31)
# Generate ATM3 mean model
ATM3_mean <- ATM3 %>%
window(start = 363)
# Calculate ATM3 mean model forecast
ATM3_mean_fc <- ATM3_mean %>%
meanf(ATM3, h = 31)
# Generate ATM4 ETS model with autoselection
ATM4_ets <- ATM4 %>%
ets()
# Generate ATM4 ETS model forecast
ATM4_ets_fc <- ATM4_ets %>%
forecast(h = 31)
# Generate ATM4 ARIMA model with autoselection, single-differenced with no shortcuts to consider all possible models
ATM4_arima <- ATM4 %>%
auto.arima(D = 1,
stepwise = FALSE,
approximation = FALSE)
# Generate ATM4 ARIMA model forecast
ATM4_arima_fc <- ATM4_arima %>%
forecast(h = 31)
# Combine the forecasts for the different ATMS
atm_all_fc <- bind_cols(as.data.frame(seq(from = 366,
to = 396,
by = 1)),
as.data.frame(ATM1_arima_fc[4:6]),
as.data.frame(ATM2_arima_fc[4:6]),
as.data.frame(ATM3_mean_fc[5]),
as.data.frame(ATM4_arima_fc[4:6]),) %>%
rename(Day = 'seq(from = 366, to = 396, by = 1)',
ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM4_mean = 'mean3',
ATM4_low80CI = 'lower.80.2',
ATM4_low95CI = 'lower.95.2',
ATM4_upper80CI = 'upper.80.2',
ATM4_upper95CI = 'upper.95.2'
)
write_csv(atm_all_fc, path = "forecasts/ATM_all_forecast.csv")
rm(list=ls())
# General
library('easypackages')
libraries('knitr', 'kableExtra', 'default')
# Processing
libraries('readxl', 'tidyverse', 'janitor', 'lubridate')
# Graphing
libraries('ggplot2', 'grid', 'gridExtra', 'ggfortify','ggpubr')
# Timeseries
libraries('zoo', 'urca', 'tseries', 'timetk')
# Math
libraries('forecast')
# Data Aquisition
atm_data <- read_excel("data/ATM624Data.xlsx")
power_data <- read_excel("data/ResidentialCustomerForecastLoad-624.xlsx")
pipe1_data <- read_excel("data/Waterflow_Pipe1.xlsx")
pipe2_data <- read_excel("data/Waterflow_Pipe2.xlsx")
# Source Code
source("scripts/Part-A-JM.R")
### UNIVERSAL DATA SOURCING & DEFAULT SETTINGS FOR PROJECT
# Load All Sourced Code
suppressWarnings(source("scripts/Part-A-JM.R"))
# Set default augments for code chunks
knitr::opts_chunk$set(echo = F, message=F, warning=F, error=F, comment=F, fig.width=10, fig.height = 3)
# Set default augments for `kable_styling()`
default(kable) <- list(format="latex")
default(kable_styling)  <- list(latex_options = c("HOLD_position", "striped"))
default(row_spec) <- list(row=0, bold=T)
# Set default for ggplot theme
default(theme) <- list(axis.text.x = element_text(angle = 0, hjust = NULL),
plot.title = element_text(color="#4c4c4c", size=12, face="bold"),
plot.subtitle = (element_text(size=8, color="#000000")),
legend.title = (element_text(size=10, color="#000000", face="bold")),
strip.background = element_rect(color="#000000",
fill="#cccdd0", size=.75, linetype="solid"),
strip.text.x = element_text(size = 8, color = "#000000", face="bold"))
# GGplot Palette
default(scale_color_brewer) <- list(palette = 'RdPu', direction=1)
### UNIVERSAL DATA SOURCING & DEFAULT SETTINGS FOR PROJECT
# Load All Sourced Code
suppressWarnings(source("scripts/Part-A-JM.R"))
# Set default augments for code chunks
knitr::opts_chunk$set(echo = F, message=F, warning=F, error=F, comment=F, fig.width=10, fig.height = 3)
# Set default augments for `kable_styling()`
default(kable) <- list(format="latex")
default(kable_styling)  <- list(latex_options = c("HOLD_position", "striped"))
default(row_spec) <- list(row=0, bold=T)
# Set default for ggplot theme
default(theme) <- list(axis.text.x = element_text(angle = 0, hjust = NULL),
plot.title = element_text(color="#4c4c4c", size=12, face="bold"),
plot.subtitle = (element_text(size=8, color="#000000")),
legend.title = (element_text(size=10, color="#000000", face="bold")),
strip.background = element_rect(color="#000000",
fill="#cccdd0", size=.75, linetype="solid"),
strip.text.x = element_text(size = 8, color = "#000000", face="bold"))
# GGplot Palette
default(scale_color_brewer) <- list(palette = 'RdPu', direction=1)
# Examine distribution of values to identify outliers
atm_data %>%
group_by(ATM) %>%
ggplot(aes(x = ATM, y = Cash)) +
geom_boxplot() +
labs(title="ATM Boxplot",x="", y="Cash (in hundreds)") +
theme_bw() +
theme(legend.position = 'none',
axis.text.x = element_text(angle = 45,
hjust = 1)) +
scale_color_brewer()
# Examine summary statistics
psych::describeBy(atm_data$Cash,  # look at distribution of cash distributed
group = atm_data$ATM,  # group by which ATM
mat = TRUE) %>%  # output matrix rather than lists
dplyr::select(-item, - vars) %>%
kable(caption = 'ATM Summary Statistics',
row.names = FALSE) %>%
kable_styling(latex_options = 'striped')
# Examine ATM3 observations
atm_data %>%
dplyr::filter(ATM == 'ATM3' & Cash > 0) %>%
select(DATE, Cash)
# plot atms as scatterplot
atm %>%
# re-gather observations for facet plot
gather(key=ATM, value=Cash, ATM1,ATM2, ATM3,ATM4) %>%
# remove NA value from ATM2
filter(complete.cases(.)) %>%
# plot
ggplot(aes(DATE, Cash, color=ATM)) +
geom_point() +
geom_smooth(method="loess") +
facet_wrap(~ATM, scales='free_x', nrow=1) +
labs(title="ATM Scatterplot",x="", y="Cash (in hundreds)")+
theme_bw()+
theme(legend.position = 'none', axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_color_brewer()
p1<-ggAcf(ATM1_ts)+ labs(title="ACF: ATM1")+ theme_bw()+theme()
p2<-ggPacf(ATM1_ts)+ labs(title="PACF: ATM1")+ theme_bw()+ theme()
p3<-ggAcf(ATM2_ts)+ labs(title="ACF: ATM2")+ theme_bw()+theme()
p4<-ggPacf(ATM2_ts)+ labs(title="PACF: ATM2")+ theme_bw()+ theme()
p5<-ggAcf(ATM4_ts)+ labs(title="ACF: ATM4")+ theme_bw()+theme()
p6<-ggPacf(ATM4_ts)+ labs(title="PACF: ATM4")+ theme_bw()+ theme()
grid.arrange(grob=p1, p3, p5, p2, p4, p6, ncol=3)
urATM1<-cbind("ATM"="ATM1", "No-Diff"=round(ATM1_ur@teststat,4),"Diff-1" =round(ATM1d_ur@teststat,4))
urATM2<-cbind("ATM"="ATM2", "No-Diff"=round(ATM2_ur@teststat,4),"Diff-1" =round(ATM2d_ur@teststat,4))
urATM4<-cbind("ATM"="ATM4", "No-Diff"=round(ATM4_ur@teststat,4),"Diff-1" =round(ATM4d_ur@teststat,4))
rbind(urATM1, urATM2,urATM4) %>% kable(caption="KPSS unit root test") %>% kable_styling() %>% row_spec()
p1<-ggAcf(ATM1_AA$residuals, lag=21)+ labs(title="ATM1", x="Lag", y="") +theme_bw()+theme()
p2<- ggpubr::gghistogram(ATM1_AA$residuals, fill="peachpuff1")+
labs(title="ATM1", subtitle="ARIMA(0,0,2)(0,1,1)[7]",x="")+
theme_bw()+theme()
p3<-ggAcf(ATM2_AA$residuals, lag=21)+ labs(title="ATM2",x="Lag", y="") +theme_bw()+theme()
p4<-ggpubr::gghistogram(ATM2_AA$residuals,  fill="lightpink")+
labs(title="ATM2", subtitle="ARIMA(2,0,2)(0,1,1)[7]",x="")+
theme_bw()+theme()
p5<-ggAcf(ATM4_AA$residuals, lag=21)+ labs(title="ATM4",x="Lag", y="") +theme_bw()+theme()
p6<-ggpubr::gghistogram(ATM4_AA$residuals,fill="deeppink4")+
labs(title="ATM4", subtitle="ARIMA(0,0,2)(0,1,1)[7]", x="")+
theme_bw()+theme()
grid.arrange(grob=p1, p3, p5, ncol=3, top=textGrob(label="ACF Plots"))
grid.arrange(p2, p4, p6, ncol=3, top=textGrob(label="Residuals Plots"))
p1<-autoplot(ATM1_AA$fitted)+autolayer(ATM1_fc, color="peachpuff1")+
coord_cartesian(xlim = c(40, 57.5))+
labs(subtitle = "ATM1 Series", x="Weeks", y="Cash")+theme_bw()+theme()+
scale_x_continuous(breaks=seq(1,60,by=3))
p2<-autoplot(ATM2_AA$fitted)+autolayer(ATM1_fc,  color="lightpink")+
coord_cartesian(xlim = c(40, 57.5))+
labs(subtitle = "ATM2 Series", x="Weeks", y="Cash")+theme_bw()+theme()+
scale_x_continuous(breaks=seq(1,60,by=3))
p3<-ATM3_plotdata %>%
ggplot()+
geom_line(aes(x = Date/7, y = Cash))+
geom_line(aes(x = Date/7, y=`Point Forecast`))+
geom_ribbon(aes(x = Date/7, ymin = `Lo 95`, ymax = `Hi 95`), linetype = 'blank', fill = 'deeppink4', alpha = .4)+
geom_ribbon(aes(x = Date/7, ymin = `Lo 80`, ymax = `Hi 80`), linetype = 'blank', fill = 'deeppink4', alpha = .2)+
coord_cartesian(xlim = c(40, 57.5))+labs(subtitle = "ATM3 Series", x="Weeks", y="Cash")+theme_bw()+theme()+
scale_x_continuous(breaks=seq(1,60,by=3))
# load data
atm_data <- read_excel("data/ATM624Data.xlsx")
# clean dataframe
atm <- atm_data %>%
# create wide dataframe
spread(ATM, Cash) %>%
# remove NA column using function from janitor package
remove_empty(which = "cols") %>%
# filter unobserved values from May 2010
filter(DATE < as.Date("2010-05-01")) %>%
# ensure dates are ascending
arrange(DATE)
atm$ATM2[is.na(atm$ATM2)] <- mean(atm$ATM2, na.rm = TRUE) ## remove NA
atm$ATM4[which.max(atm$ATM4)] <- mean(atm$ATM4, na.rm = TRUE) ## remove outlier
# create TS with weekly frequency & subset data
atm_ts <- atm %>% select(-DATE) %>% ts(start=1,  frequency = 7)
ATM1_ts <- atm_ts[,1]; ATM2_ts <- atm_ts[,2]; ATM3_ts <- atm_ts[,3]; ATM4_ts <- atm_ts[,4]
#unit root test
## no diff
ATM1_ur <-ur.kpss(ATM1_ts)
ATM2_ur <-ur.kpss(ATM2_ts)
ATM4_ur <-ur.kpss(ATM4_ts)
## first order diff
ATM1d_ur <-ur.kpss(diff(ATM1_ts, lag=7))
ATM2d_ur <-ur.kpss(diff(ATM2_ts, lag=7))
ATM4d_ur <-ur.kpss(diff(ATM4_ts, lag=7))
# AUTO.ARIMA function; set D=1 for seasonal differencing
ATM1_AA <-auto.arima(ATM1_ts, D = 1, lambda = "auto", approximation = F, stepwise = T)
ATM2_AA <-auto.arima(ATM2_ts, D = 1, lambda = "auto", approximation = F, stepwise = T)
ATM4_AA <-auto.arima(ATM4_ts, D = 1, lambda = "auto", approximation = F, stepwise = T)
# Forecast Results
ATM1_fc <- forecast(ATM1_AA,h=31)
ATM2_fc <- forecast(ATM2_AA,h=31)
ATM3_fc <- meanf(ATM3_ts[ATM3_ts > 0], h=31)# based on three non-zero values (between observations 363 and 365)
ATM4_fc <- forecast(ATM4_AA,h=31)
# Prepare dataframe for ATM3 mean forcast plotting
ATM3_plotdata_fc <- cbind(seq(from = 366, to = 396),
ATM3_fc[[5]],
ATM3_fc[[6]],
ATM3_fc[[7]]) %>%
as.data.frame()
colnames(ATM3_plotdata_fc) <- c('Date', 'Point Forecast', 'Lo 80', 'Lo 95', 'Hi 80', 'Hi 95')
ATM3_plotdata <- ATM3_ts %>%
fortify() %>%
select(-Index) %>%
rename(Cash = Data) %>%
mutate(Date = as.numeric(row.names(.))) %>%
select(Date, Cash) %>%
full_join(ATM3_plotdata_fc, by = 'Date')
# Revert results back into original form
# date <- as.character(seq(as.Date('2010-05-01'), length.out=31, by=1))
# ATM_FC <-  cbind("Date"=date, "ATM1"=ATM1_fc$mean, "ATM2"=ATM2_fc$mean,
# "ATM3"=c(NA,NA,NA,NA),"ATM4"=ATM4_fc$mean) %>% as.data.frame()
# Combine the forecasts for the different ATMS
ATM_ALL_FC <- bind_cols(as.data.frame(ATM1_AA[4:6]),
as.data.frame(ATM2_AA[4:6]),
as.data.frame(ATM3_fc[5]),
as.data.frame(ATM4_AA[4:6]),) %>%
rename(ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM4_mean = 'mean3',
ATM4_low80CI = 'lower.80.2',
ATM4_low95CI = 'lower.95.2',
ATM4_upper80CI = 'upper.80.2',
ATM4_upper95CI = 'upper.95.2'
)
ATM_ALL_FC <- cbind(as.data.frame(ATM1_AA[4:6]),
as.data.frame(ATM2_AA[4:6]),
as.data.frame(ATM3_fc[5]),
as.data.frame(ATM4_AA[4:6]),) %>%
rename(ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM4_mean = 'mean3',
ATM4_low80CI = 'lower.80.2',
ATM4_low95CI = 'lower.95.2',
ATM4_upper80CI = 'upper.80.2',
ATM4_upper95CI = 'upper.95.2'
)
ATM_ALL_FC <- bind_cols(as.data.frame(ATM1_AA[4:6]),
as.data.frame(ATM2_AA[4:6]),
as.data.frame(ATM3_fc[5]),
as.data.frame(ATM4_AA[4:6])) %>%
rename(ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM4_mean = 'mean3',
ATM4_low80CI = 'lower.80.2',
ATM4_low95CI = 'lower.95.2',
ATM4_upper80CI = 'upper.80.2',
ATM4_upper95CI = 'upper.95.2'
)
str(ATM3_fc)
ATM3_fc[1]
ATM3_fc[2]
ATM3_fc[3]
ATM3_fc[4]
ATM3_fc[5]
ATM3_fc[6]
ATM3_fc[6:7]
# load data
atm_data <- read_excel("data/ATM624Data.xlsx")
# clean dataframe
atm <- atm_data %>%
# create wide dataframe
spread(ATM, Cash) %>%
# remove NA column using function from janitor package
remove_empty(which = "cols") %>%
# filter unobserved values from May 2010
filter(DATE < as.Date("2010-05-01")) %>%
# ensure dates are ascending
arrange(DATE)
atm$ATM2[is.na(atm$ATM2)] <- mean(atm$ATM2, na.rm = TRUE) ## remove NA
atm$ATM4[which.max(atm$ATM4)] <- mean(atm$ATM4, na.rm = TRUE) ## remove outlier
# create TS with weekly frequency & subset data
atm_ts <- atm %>% select(-DATE) %>% ts(start=1,  frequency = 7)
ATM1_ts <- atm_ts[,1]; ATM2_ts <- atm_ts[,2]; ATM3_ts <- atm_ts[,3]; ATM4_ts <- atm_ts[,4]
#unit root test
## no diff
ATM1_ur <-ur.kpss(ATM1_ts)
ATM2_ur <-ur.kpss(ATM2_ts)
ATM4_ur <-ur.kpss(ATM4_ts)
## first order diff
ATM1d_ur <-ur.kpss(diff(ATM1_ts, lag=7))
ATM2d_ur <-ur.kpss(diff(ATM2_ts, lag=7))
ATM4d_ur <-ur.kpss(diff(ATM4_ts, lag=7))
# AUTO.ARIMA function; set D=1 for seasonal differencing
ATM1_AA <-auto.arima(ATM1_ts, D = 1, lambda = "auto", approximation = F, stepwise = T)
ATM2_AA <-auto.arima(ATM2_ts, D = 1, lambda = "auto", approximation = F, stepwise = T)
ATM4_AA <-auto.arima(ATM4_ts, D = 1, lambda = "auto", approximation = F, stepwise = T)
# Forecast Results
ATM1_fc <- forecast(ATM1_AA,h=31)
ATM2_fc <- forecast(ATM2_AA,h=31)
ATM3_fc <- meanf(ATM3_ts[ATM3_ts > 0], h=31)# based on three non-zero values (between observations 363 and 365)
ATM4_fc <- forecast(ATM4_AA,h=31)
# Prepare dataframe for ATM3 mean forcast plotting
ATM3_plotdata_fc <- cbind(seq(from = 366, to = 396),
ATM3_fc[[5]],
ATM3_fc[[6]],
ATM3_fc[[7]]) %>%
as.data.frame()
colnames(ATM3_plotdata_fc) <- c('Date', 'Point Forecast', 'Lo 80', 'Lo 95', 'Hi 80', 'Hi 95')
ATM3_plotdata <- ATM3_ts %>%
fortify() %>%
select(-Index) %>%
rename(Cash = Data) %>%
mutate(Date = as.numeric(row.names(.))) %>%
select(Date, Cash) %>%
full_join(ATM3_plotdata_fc, by = 'Date')
# Revert results back into original form
# date <- as.character(seq(as.Date('2010-05-01'), length.out=31, by=1))
# ATM_FC <-  cbind("Date"=date, "ATM1"=ATM1_fc$mean, "ATM2"=ATM2_fc$mean,
# "ATM3"=c(NA,NA,NA,NA),"ATM4"=ATM4_fc$mean) %>% as.data.frame()
# Combine the forecasts for the different ATMS
ATM_ALL_FC <- bind_cols(as.data.frame(ATM1_AA[4:6]),
as.data.frame(ATM2_AA[4:6]),
as.data.frame(ATM3_fc[5:7]),
as.data.frame(ATM4_AA[4:6])) %>%
rename(ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM3_low80CI = 'lower.80.2',
ATM3_low95CI = 'lower.95.2',
ATM3_upper80CI = 'upper.80.2',
ATM3_upper95CI = 'upper.95.2'
ATM4_mean = 'mean3',
# Combine the forecasts for the different ATMS
ATM_ALL_FC <- bind_cols(as.data.frame(ATM1_AA[4:6]),
as.data.frame(ATM2_AA[4:6]),
as.data.frame(ATM3_fc[5:7]),
as.data.frame(ATM4_AA[4:6])) %>%
rename(ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM3_low80CI = 'lower.80.2',
ATM3_low95CI = 'lower.95.2',
ATM3_upper80CI = 'upper.80.2',
ATM3_upper95CI = 'upper.95.2',
ATM4_mean = 'mean3',
ATM4_low80CI = 'lower.80.3',
ATM4_low95CI = 'lower.95.3',
ATM4_upper80CI = 'upper.80.3',
ATM4_upper95CI = 'upper.95.3'
)
as.data.frame(ATM2_AA[4:6]) %>% head()
as.data.frame(ATM3_fc[5:7]) %>% head()
as.data.frame(ATM2_AA[4:6]) %>% head()
as.data.frame(ATM2_AA[4:6])
ATM2_AA[1:6]
str(ATM2_AA)
str(ATM1_fc)
ATM1_fc[4:6]
ATM3_fc[4:6]
ATM_ALL_FC <- bind_cols(as.data.frame(ATM1_fc[4:6]),
as.data.frame(ATM2_fc[4:6]),
as.data.frame(ATM3_fc[5:7]),
as.data.frame(ATM4_fc[4:6])) %>%
rename(ATM1_mean = 'mean',
ATM1_low80CI = 'lower.80.',
ATM1_low95CI = 'lower.95.',
ATM1_upper80CI = 'upper.80.',
ATM1_upper95CI = 'upper.95.',
ATM2_mean = 'mean1',
ATM2_low80CI = 'lower.80.1',
ATM2_low95CI = 'lower.95.1',
ATM2_upper80CI = 'upper.80.1',
ATM2_upper95CI = 'upper.95.1',
ATM3_mean = 'mean2',
ATM3_low80CI = 'lower.80.2',
ATM3_low95CI = 'lower.95.2',
ATM3_upper80CI = 'upper.80.2',
ATM3_upper95CI = 'upper.95.2',
ATM4_mean = 'mean3',
ATM4_low80CI = 'lower.80.3',
ATM4_low95CI = 'lower.95.3',
ATM4_upper80CI = 'upper.80.3',
ATM4_upper95CI = 'upper.95.3'
)
ATM_ALL_FC %>% head()
